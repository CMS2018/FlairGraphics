@model IList<FlairGraphic.Base.Models.ControllerAction>
@using Newtonsoft.Json;

@{

}

<script>
    $(document).ready(function () {
        $('input[id^="chkCtrl_"]').each(function () {
            var controllerName = this.id.split('_')[1];
            toggleControllerSelectAll(controllerName);
        })
        STUtil.initValid();
    })

    function toggleControllerSelectAll(controllerName) {
        var controller = 'chkCtrl' + '_' + controllerName;
        var action = controller.replace('Ctrl', '');
        var totalActions = $('input[id^="' + action + '_"]').length;
        var totalActionsChecked = $('input[id^="' + action + '_"]:checked').length;
        $('#' + controller).prop('checked', totalActions == totalActionsChecked);

        var selection = '';
        if (!base.isNullOrEmpty(changes)) {
            selection = changes.split(',').length > 0 ? ('(' + changes.split(',').length + ')') : '';
        }
        $('#btnSaveAction').val('Save' + selection);
        $('#btnSaveAction').attr('disabled', base.isNullOrEmpty(changes));

    }
    var changes = '';
    function checkChanged(ctrl) {
        // debugger//
        var info = ctrl.id.split('_'); //chk_CityController_Create_False
        processChanges(ctrl);
        toggleControllerSelectAll(info[1]);
        //alert(changes);
    }
    function processChanges(ctrl) {
        var info = ctrl.id.split('_'); //chk_CityController_Create_False
        if (ctrl.checked.toString().toUpperCase() == info[3].toUpperCase()) { //unchecked=unchecked, see if already added previously
            var item = changes.indexOf(ctrl.id + ',') == -1 ? ctrl.id : (ctrl.id + ',');
            changes = changes.replace(item, '');
        } else {
            changes += (base.isNullOrEmpty(changes) ? '' : ',') + ctrl.id;
        }
    }
    function submitClicked() {
        // debugger//
        if (changes.length > 0) {
            $.post(base.getUrl('CompanySetting', 'PostCompanyRoleAction'), { id: changes, roleID: '@ViewBag.role_id' },
            function (data) {
                ////
                base.notificaton({ result: { title: '', MessageType: 0, Message: "Action Saved Successfully" } })
                $('#modalRoleAction').modal('toggle');
            });
        } else {
            base.notificaton({ result: { title: '', MessageType: 2, Message: "there is no change !" } })
        }
        return false;
    }
    function onchangeController(s) {
        ////
        var ctrlId = s.id;
        var selectAll = $('#' + ctrlId).is(":checked");
        var actionName = ctrlId.replace('Ctrl', ''); //'chkCtrl_CityController' ==>chk_CityController_Index_True
        $('input[id^="' + actionName + '_"]').each(function () {
            ////
            $(this).prop('checked', selectAll);
            processChanges(this);
        });
        var selection = '';
        if (!base.isNullOrEmpty(changes)) {
            selection = changes.split(',').length > 0 ? ('(' + changes.split(',').length + ')') : '';
        }
        $('#btnSaveAction').val('Save' + selection);
        $('#btnSaveAction').attr('disabled', base.isNullOrEmpty(changes));
    }
</script>
<div class="row">
        <div class="card-box table-responsive">
            <div class="box box-primary">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.Hidden("hdnRoleID", ViewBag.role_id as object)
                    <div class="box-body">
                        <div class="row">
                            <div class="col-md-12">
                                @{
                                    string oldControllerName = "";
                                }
                                @for (int i = 0; i < Model.Count; i++)
                                {
                                    string uniqueID = string.Format("chk_{0}_{1}_{2}", Model[i].ControllerName, Model[i].ActionName, Model[i].IsAssigned);
                                    // string fs = string.Format(" <h4 class='page-header'><input type='checkbox' id='chkCtrl_{0}' onchange='onchangeController(this);' />{0}&nbsp;</h4>", Model[i].ControllerName);
                                    string fs = string.Format("<div class='card m-b-20'><div class='card-header user-tabl' onclick='togg_div({1})'> <input type='checkbox' id='chkCtrl_{0}' value='" + @Model[i].IsAssigned.ToString() + "' onchange='onchangeController(this);' /> <label for='chkCtrl_{0}'></label><b>{0}&nbsp;</b></div>", Model[i].ControllerName, i);

                                    @Html.Raw(oldControllerName != Model[i].ControllerName ? fs + String.Format(" <div id='hddenfld_{0}'>", i) : "")
                                    <div class="chckk">
                                        <div class="checkbox checkbox-primary pull-left p-t-0">
                                            <input type="checkbox" value="@Model[i].IsAssigned.ToString()" onchange="checkChanged(this);" id="@uniqueID" name="@uniqueID" />
                                            <label for="@uniqueID"> @Model[i].ActionName </label>    
                                        </div>
                                        </div>
                                        @Html.Raw(i == Model.Count - 1 || Model[i].ControllerName != Model[i + 1].ControllerName ? "</div></div>" : "")
                                        oldControllerName = Model[i].ControllerName;
                                    }
                            </div>
                        </div>
                    </div>
                    <div class="box-footer p-b-10">
                        <input name="btnSaveAction" id="btnSaveAction" type="button" class="btn btn-success waves-effect waves-light m-r-10" value="Save" disabled onclick="return submitClicked();">
                    </div>
                }
            </div>
        </div>
    </div>
<script>
    function togg_div(i) {
        //var x = document.getElementById("hddenfld_" + i);
        var x = $("#hddenfld_" + i);
        if (x.style.display === "none") {
            x.style.display = "inline-flex";
        } else {
            x.style.display = "none";
        }
    }
</script>