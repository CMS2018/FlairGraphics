@using FlairGraphic.Base.Models;
@model FlairGraphic.Models.job
@{
    string Is_view = Model.company_id > 0 ? "block" : "none";
}
<script>
    $(document).ready(function () {
        STUtil.InitFunction();

    })

</script>
<style>

    body {
        background-color: #474e5d;
        font-family: Helvetica, sans-serif;
    }
    * {
        box-sizing: border-box;
    }

    body {
        background-color: #474e5d;
        font-family: Helvetica, sans-serif;
    }

    /* The actual timeline (the vertical ruler) */
    .timeline {
        position: relative;
        max-width: 1200px;
        margin: 0 auto;
    }

        /* The actual timeline (the vertical ruler) */
        .timeline::after {
            content: '';
            position: absolute;
            width: 6px;
            background-color: white;
            top: 0;
            bottom: 0;
            left: 50%;
            margin-left: -3px;
        }

    /* Container around content */
    .container {
        padding: 10px 40px;
        position: relative;
        background-color: inherit;
        width: 50%;
    }

        /* The circles on the timeline */
        .container::after {
            content: '';
            position: absolute;
            width: 25px;
            height: 25px;
            right: -17px;
            background-color: white;
            border: 4px solid #FF9F55;
            top: 15px;
            border-radius: 50%;
            z-index: 1;
        }

    /* Place the container to the left */
    .left {
        left: 0;
    }

    /* Place the container to the right */
    .right {
        left: 50%;
    }

    /* Add arrows to the left container (pointing right) */
    .left::before {
        content: " ";
        height: 0;
        position: absolute;
        top: 22px;
        width: 0;
        z-index: 1;
        right: 30px;
        border: medium solid white;
        border-width: 10px 0 10px 10px;
        border-color: transparent transparent transparent white;
    }

    /* Add arrows to the right container (pointing left) */
    .right::before {
        content: " ";
        height: 0;
        position: absolute;
        top: 22px;
        width: 0;
        z-index: 1;
        left: 30px;
        border: medium solid white;
        border-width: 10px 10px 10px 0;
        border-color: transparent white transparent transparent;
    }

    /* Fix the circle for containers on the right side */
    .right::after {
        left: -16px;
    }

    /* The actual content */
    .content {
        padding: 20px 30px;
        background-color: white;
        position: relative;
        border-radius: 6px;
    }


    /* Place the timelime to the left */
    .timeline::after {
        left: 31px;
    }

    /* Full-width containers */
    .container {
        width: 100%;
        padding-left: 70px;
        padding-right: 25px;
    }

        /* Make sure that all arrows are pointing leftwards */
        .container::before {
            left: 60px;
            border: medium solid white;
            border-width: 10px 10px 10px 0;
            border-color: transparent white transparent transparent;
        }

    /* Make sure all circles are at the same spot */
    .left::after, .right::after {
        left: 15px;
    }

    /* Make all right containers behave like the left ones */
    .right {
        left: 0%;
    }
</style>
@using (Html.BeginForm("CreteEditJob", "Job", FormMethod.Post, new { enctype = "multipart/form-data", id = "frmAddJob", @class = "form-material m-t-40" }))
{
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <input type="hidden" id="job_id" name="job_id" value="@Model.job_id" />
                @Html.HiddenFor(x => x.created_by)
                @Html.HiddenFor(x => x.created_date)
                @Html.HiddenFor(x => x.updated_by)
                @Html.HiddenFor(x => x.updated_date)
                <label>Job Type</label>
                @Html.DropDownList("job_type_id", ViewBag.job_type_id as List<SelectListItem>, "Please Select", new { @class = "form-control", required = "required" })
            </div>
        </div>
        @if (Model.company_id > 0)
        {
            <div class="col-md-6">
                <div class="form-group">
                    <label>Job Status</label>
                    @Html.DropDownList("job_status_id", ViewBag.job_status_id as List<SelectListItem>, "Please Select", new { @class = "form-control", required = "required" })
                </div>
            </div>
        }
        <div class="col-md-6">
            <div class="form-group">
                <label>Client</label>
                @Html.DropDownList("client_id", ViewBag.client_id as List<SelectListItem>, "Please Select", new { @class = "form-control", required = "required" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label>Paper Type</label>
                @Html.DropDownList("paper_type_id", ViewBag.paper_type_id as List<SelectListItem>, "Please Select", new { @class = "form-control", required = "required" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label>Paper Sub Type</label>
                @Html.DropDownList("paper_sub_type_id", ViewBag.paper_sub_type_id as List<SelectListItem>, "Please Select", new { @class = "form-control", required = "required" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label>Lemination Type</label>
                @Html.DropDownList("lemination_type_id", ViewBag.lemination_type_id as List<SelectListItem>, "Please Select", new { @class = "form-control", required = "required" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label>Quantity</label>
                @Html.TextBoxFor(m => m.quantity, new { @class = "form-control", id = "quantity", placeholder = "Quantity", pattern = @RegExConst.NumbersOnly, required = "required", title = "Enter Quantity" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label>Comment</label>
                <input class="form-control" id="comment" name="comment" placeholder="Comments" required="required" title="Enter Comment" type="text" value="">
            </div>
        </div>
        <div class="col-md-6" style="display:@Is_view">
            <div class="form-group">
                <div class="checkbox checkbox-primary pull-left p-t-0">
                    <input id="is_active" onclick="STUtil.checkboxCheck(ctrlId:'is_active',formId:'frmAddJob')" name="is_active" type="checkbox" value="@Model.is_active.ToString()">
                    <label for="is_active">Enable</label>
                </div>
            </div>
        </div>
        <div class="clearfix"></div>
        <div class="col-md-12" style="float:right">
            <button type="submit" class="btn btn-success waves-effect waves-light m-r-10">Submit</button>
        </div>

        <div class="tracking-content">
        </div>

    </div>
}
<body contenteditable="false">
    <div class="timeline"style="
    background-color: #474e5d;
    font-family: Helvetica, sans-serif;
">
        
                @Html.Raw(Model.comment)

            
    </div>
</body>