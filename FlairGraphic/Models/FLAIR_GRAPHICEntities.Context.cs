//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlairGraphic.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FLAIR_GRAPHICEntities : DbContext
    {
        public FLAIR_GRAPHICEntities()
            : base("name=FLAIR_GRAPHICEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<account_type> account_type { get; set; }
        public virtual DbSet<amount_status> amount_status { get; set; }
        public virtual DbSet<app_error_log> app_error_log { get; set; }
        public virtual DbSet<application_configuration> application_configuration { get; set; }
        public virtual DbSet<application_template> application_template { get; set; }
        public virtual DbSet<application_template_placeholder> application_template_placeholder { get; set; }
        public virtual DbSet<application_template_type> application_template_type { get; set; }
        public virtual DbSet<area> areas { get; set; }
        public virtual DbSet<category> categories { get; set; }
        public virtual DbSet<catelog> catelogs { get; set; }
        public virtual DbSet<catelog_attachment> catelog_attachment { get; set; }
        public virtual DbSet<city> cities { get; set; }
        public virtual DbSet<client_type> client_type { get; set; }
        public virtual DbSet<company> companies { get; set; }
        public virtual DbSet<company_holiday> company_holiday { get; set; }
        public virtual DbSet<company_work_days> company_work_days { get; set; }
        public virtual DbSet<country> countries { get; set; }
        public virtual DbSet<currency> currencies { get; set; }
        public virtual DbSet<data_control_type> data_control_type { get; set; }
        public virtual DbSet<date_format> date_format { get; set; }
        public virtual DbSet<document_type> document_type { get; set; }
        public virtual DbSet<duration_days> duration_days { get; set; }
        public virtual DbSet<gender> genders { get; set; }
        public virtual DbSet<industry_type> industry_type { get; set; }
        public virtual DbSet<job> jobs { get; set; }
        public virtual DbSet<job_assignment> job_assignment { get; set; }
        public virtual DbSet<job_attachment> job_attachment { get; set; }
        public virtual DbSet<job_status> job_status { get; set; }
        public virtual DbSet<job_type> job_type { get; set; }
        public virtual DbSet<language> languages { get; set; }
        public virtual DbSet<lemination_type> lemination_type { get; set; }
        public virtual DbSet<menu> menus { get; set; }
        public virtual DbSet<menu_access_controller_action> menu_access_controller_action { get; set; }
        public virtual DbSet<nationality> nationalities { get; set; }
        public virtual DbSet<package> packages { get; set; }
        public virtual DbSet<package_subscription> package_subscription { get; set; }
        public virtual DbSet<package_type> package_type { get; set; }
        public virtual DbSet<paper_sub_type> paper_sub_type { get; set; }
        public virtual DbSet<paper_type> paper_type { get; set; }
        public virtual DbSet<payment_mode> payment_mode { get; set; }
        public virtual DbSet<payment_status> payment_status { get; set; }
        public virtual DbSet<religion> religions { get; set; }
        public virtual DbSet<role> roles { get; set; }
        public virtual DbSet<role_action> role_action { get; set; }
        public virtual DbSet<role_menu> role_menu { get; set; }
        public virtual DbSet<state> states { get; set; }
        public virtual DbSet<sub_area> sub_area { get; set; }
        public virtual DbSet<theme_color> theme_color { get; set; }
        public virtual DbSet<time_format> time_format { get; set; }
        public virtual DbSet<user> users { get; set; }
    
        [DbFunction("FLAIR_GRAPHICSEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[FLAIR_GRAPHICSEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual ObjectResult<GetMenu_Result> GetMenu(Nullable<int> roleId, Nullable<int> companyid)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMenu_Result>("GetMenu", roleIdParameter, companyidParameter);
        }
    
        public virtual ObjectResult<GetParentRole_Result> GetParentRole(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetParentRole_Result>("GetParentRole", companyIDParameter);
        }
    
        public virtual int TEMP_COPY_ROLE(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TEMP_COPY_ROLE", companyIDParameter);
        }
    
        public virtual int USP_ActivateAccount(Nullable<int> uSER_ID, Nullable<int> cOMPANY_ID, string lOGIN_ID, string pWD, string businessName)
        {
            var uSER_IDParameter = uSER_ID.HasValue ?
                new ObjectParameter("USER_ID", uSER_ID) :
                new ObjectParameter("USER_ID", typeof(int));
    
            var cOMPANY_IDParameter = cOMPANY_ID.HasValue ?
                new ObjectParameter("COMPANY_ID", cOMPANY_ID) :
                new ObjectParameter("COMPANY_ID", typeof(int));
    
            var lOGIN_IDParameter = lOGIN_ID != null ?
                new ObjectParameter("LOGIN_ID", lOGIN_ID) :
                new ObjectParameter("LOGIN_ID", typeof(string));
    
            var pWDParameter = pWD != null ?
                new ObjectParameter("PWD", pWD) :
                new ObjectParameter("PWD", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ActivateAccount", uSER_IDParameter, cOMPANY_IDParameter, lOGIN_IDParameter, pWDParameter, businessNameParameter);
        }
    
        public virtual int USP_AddRoleMenuAndAction(Nullable<int> roleID, Nullable<int> companyID, Nullable<int> menuID, Nullable<bool> isRemove)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("menuID", menuID) :
                new ObjectParameter("menuID", typeof(int));
    
            var isRemoveParameter = isRemove.HasValue ?
                new ObjectParameter("isRemove", isRemove) :
                new ObjectParameter("isRemove", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_AddRoleMenuAndAction", roleIDParameter, companyIDParameter, menuIDParameter, isRemoveParameter);
        }
    
        public virtual ObjectResult<USP_ChangePassword_Result> USP_ChangePassword(Nullable<int> userId, string oldPassword, string newpassword, string conformpassword)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newpasswordParameter = newpassword != null ?
                new ObjectParameter("newpassword", newpassword) :
                new ObjectParameter("newpassword", typeof(string));
    
            var conformpasswordParameter = conformpassword != null ?
                new ObjectParameter("Conformpassword", conformpassword) :
                new ObjectParameter("Conformpassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ChangePassword_Result>("USP_ChangePassword", userIdParameter, oldPasswordParameter, newpasswordParameter, conformpasswordParameter);
        }
    
        public virtual ObjectResult<USP_CreateUser_Result> USP_CreateUser(Nullable<int> uSER_ID, string user_name, string login_id, string email_id, string mobile, string password, string gender, string user_photo, Nullable<int> parent_user_id, Nullable<int> role_bit, Nullable<int> company_id, Nullable<int> created_by, Nullable<int> role_id, Nullable<int> create_work_order_access_id, Nullable<int> view_work_order_access_id, Nullable<bool> is_change_requester, Nullable<bool> is_service_provider, Nullable<bool> is_active)
        {
            var uSER_IDParameter = uSER_ID.HasValue ?
                new ObjectParameter("USER_ID", uSER_ID) :
                new ObjectParameter("USER_ID", typeof(int));
    
            var user_nameParameter = user_name != null ?
                new ObjectParameter("user_name", user_name) :
                new ObjectParameter("user_name", typeof(string));
    
            var login_idParameter = login_id != null ?
                new ObjectParameter("login_id", login_id) :
                new ObjectParameter("login_id", typeof(string));
    
            var email_idParameter = email_id != null ?
                new ObjectParameter("email_id", email_id) :
                new ObjectParameter("email_id", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var user_photoParameter = user_photo != null ?
                new ObjectParameter("user_photo", user_photo) :
                new ObjectParameter("user_photo", typeof(string));
    
            var parent_user_idParameter = parent_user_id.HasValue ?
                new ObjectParameter("parent_user_id", parent_user_id) :
                new ObjectParameter("parent_user_id", typeof(int));
    
            var role_bitParameter = role_bit.HasValue ?
                new ObjectParameter("role_bit", role_bit) :
                new ObjectParameter("role_bit", typeof(int));
    
            var company_idParameter = company_id.HasValue ?
                new ObjectParameter("company_id", company_id) :
                new ObjectParameter("company_id", typeof(int));
    
            var created_byParameter = created_by.HasValue ?
                new ObjectParameter("created_by", created_by) :
                new ObjectParameter("created_by", typeof(int));
    
            var role_idParameter = role_id.HasValue ?
                new ObjectParameter("role_id", role_id) :
                new ObjectParameter("role_id", typeof(int));
    
            var create_work_order_access_idParameter = create_work_order_access_id.HasValue ?
                new ObjectParameter("create_work_order_access_id", create_work_order_access_id) :
                new ObjectParameter("create_work_order_access_id", typeof(int));
    
            var view_work_order_access_idParameter = view_work_order_access_id.HasValue ?
                new ObjectParameter("view_work_order_access_id", view_work_order_access_id) :
                new ObjectParameter("view_work_order_access_id", typeof(int));
    
            var is_change_requesterParameter = is_change_requester.HasValue ?
                new ObjectParameter("is_change_requester", is_change_requester) :
                new ObjectParameter("is_change_requester", typeof(bool));
    
            var is_service_providerParameter = is_service_provider.HasValue ?
                new ObjectParameter("is_service_provider", is_service_provider) :
                new ObjectParameter("is_service_provider", typeof(bool));
    
            var is_activeParameter = is_active.HasValue ?
                new ObjectParameter("is_active", is_active) :
                new ObjectParameter("is_active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CreateUser_Result>("USP_CreateUser", uSER_IDParameter, user_nameParameter, login_idParameter, email_idParameter, mobileParameter, passwordParameter, genderParameter, user_photoParameter, parent_user_idParameter, role_bitParameter, company_idParameter, created_byParameter, role_idParameter, create_work_order_access_idParameter, view_work_order_access_idParameter, is_change_requesterParameter, is_service_providerParameter, is_activeParameter);
        }
    
        public virtual ObjectResult<string> USP_Decrypt_TEXT(byte[] cipher)
        {
            var cipherParameter = cipher != null ?
                new ObjectParameter("Cipher", cipher) :
                new ObjectParameter("Cipher", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_Decrypt_TEXT", cipherParameter);
        }
    
        public virtual ObjectResult<byte[]> USP_Encrypt_TEXT(string plaintext)
        {
            var plaintextParameter = plaintext != null ?
                new ObjectParameter("plaintext", plaintext) :
                new ObjectParameter("plaintext", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("USP_Encrypt_TEXT", plaintextParameter);
        }
    
        public virtual ObjectResult<USP_GetUserPassword_Result> USP_GetUserPassword(Nullable<int> userID, Nullable<int> compnayID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var compnayIDParameter = compnayID.HasValue ?
                new ObjectParameter("CompnayID", compnayID) :
                new ObjectParameter("CompnayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUserPassword_Result>("USP_GetUserPassword", userIDParameter, compnayIDParameter);
        }
    
        public virtual ObjectResult<USP_GetUsersByCompanyId_Result> USP_GetUsersByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUsersByCompanyId_Result>("USP_GetUsersByCompanyId", companyIdParameter);
        }
    
        public virtual ObjectResult<USP_Login_Result> USP_Login(string loginID, string pWD, Nullable<bool> isWeb)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var pWDParameter = pWD != null ?
                new ObjectParameter("PWD", pWD) :
                new ObjectParameter("PWD", typeof(string));
    
            var isWebParameter = isWeb.HasValue ?
                new ObjectParameter("IsWeb", isWeb) :
                new ObjectParameter("IsWeb", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Login_Result>("USP_Login", loginIDParameter, pWDParameter, isWebParameter);
        }
    
        public virtual int USP_OwnerByRoleOrCompany(Nullable<int> companyId, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_OwnerByRoleOrCompany", companyIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<USP_Process_ResetPWDLink_Result> USP_Process_ResetPWDLink(string loginID)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Process_ResetPWDLink_Result>("USP_Process_ResetPWDLink", loginIDParameter);
        }
    
        public virtual int USP_RestAccount(Nullable<int> uSER_ID, string pWD)
        {
            var uSER_IDParameter = uSER_ID.HasValue ?
                new ObjectParameter("USER_ID", uSER_ID) :
                new ObjectParameter("USER_ID", typeof(int));
    
            var pWDParameter = pWD != null ?
                new ObjectParameter("PWD", pWD) :
                new ObjectParameter("PWD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_RestAccount", uSER_IDParameter, pWDParameter);
        }
    
        public virtual int USP_UpdateCompany(Nullable<int> companyID, Nullable<int> updatedBy, string businessName, string timeZone, string countryCode, string phone, Nullable<int> stateID, string city, string address, string zip, string adminUserName, Nullable<bool> isActive, Nullable<System.DateTime> updatedDate, string licenceNo, string company_logo)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(int));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("businessName", businessName) :
                new ObjectParameter("businessName", typeof(string));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("timeZone", timeZone) :
                new ObjectParameter("timeZone", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("countryCode", countryCode) :
                new ObjectParameter("countryCode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("stateID", stateID) :
                new ObjectParameter("stateID", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var adminUserNameParameter = adminUserName != null ?
                new ObjectParameter("adminUserName", adminUserName) :
                new ObjectParameter("adminUserName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("updatedDate", updatedDate) :
                new ObjectParameter("updatedDate", typeof(System.DateTime));
    
            var licenceNoParameter = licenceNo != null ?
                new ObjectParameter("LicenceNo", licenceNo) :
                new ObjectParameter("LicenceNo", typeof(string));
    
            var company_logoParameter = company_logo != null ?
                new ObjectParameter("company_logo", company_logo) :
                new ObjectParameter("company_logo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateCompany", companyIDParameter, updatedByParameter, businessNameParameter, timeZoneParameter, countryCodeParameter, phoneParameter, stateIDParameter, cityParameter, addressParameter, zipParameter, adminUserNameParameter, isActiveParameter, updatedDateParameter, licenceNoParameter, company_logoParameter);
        }
    
        public virtual ObjectResult<USP_Create_Company_user_SA_Result> USP_Create_Company_user_SA(string timeZone, string companyName, string countryCode, string phone, string addrerss, string city, string zip, Nullable<int> stateID, string userName, string loginID, string mobileNumber, string emailID, string password, string gender, string licenceNo, string nA_IMAGE)
        {
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addrerssParameter = addrerss != null ?
                new ObjectParameter("Addrerss", addrerss) :
                new ObjectParameter("Addrerss", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var licenceNoParameter = licenceNo != null ?
                new ObjectParameter("LicenceNo", licenceNo) :
                new ObjectParameter("LicenceNo", typeof(string));
    
            var nA_IMAGEParameter = nA_IMAGE != null ?
                new ObjectParameter("NA_IMAGE", nA_IMAGE) :
                new ObjectParameter("NA_IMAGE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Create_Company_user_SA_Result>("USP_Create_Company_user_SA", timeZoneParameter, companyNameParameter, countryCodeParameter, phoneParameter, addrerssParameter, cityParameter, zipParameter, stateIDParameter, userNameParameter, loginIDParameter, mobileNumberParameter, emailIDParameter, passwordParameter, genderParameter, licenceNoParameter, nA_IMAGEParameter);
        }
    }
}
